{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"mongodb/","title":"Base de datos MongoDB con MongoDB Express","text":""},{"location":"mongodb/#instrucciones-para-levantar-el-escenario","title":"Instrucciones para levantar el escenario","text":"<p>Este escenario pretende levantar dos contenedores:</p> <ol> <li>Base de datos NoSQL MongoDB</li> <li>Interfaz de administraci\u00f3n web de MongoDB, Mongo Express</li> </ol> <p>El <code>docker-compose.yml</code>lucir\u00e1 tal que as\u00ed:</p> <pre><code>services:\nmongo:\nimage: mongo # (1)\ncontainer_name: mongoDB # (2)\nrestart: always # (3)\nenvironment:\nMONGO_INITDB_ROOT_USERNAME: ${USER}\nMONGO_INITDB_ROOT_PASSWORD: ${PASSWORD}\nmongo-express:\nimage: mongo-express\nrestart: always\nports:\n- 8081:8081 # (4)\nenvironment:\nME_CONFIG_MONGODB_ADMINUSERNAME: ${USER}\nME_CONFIG_MONGODB_ADMINPASSWORD: ${PASSWORD}\nME_CONFIG_MONGODB_URL: mongodb://${USER}:${PASSWORD}@mongoDB:27017/\nME_CONFIG_BASICAUTH: false\n</code></pre> <ol> <li>Imagen a partir de la cual se crear\u00e1 el contenedor. Podr\u00edamos indicarle una versi\u00f3n concreta de MongoDB si fuese necesario.</li> <li>Nombre que le damos a nuestro contenedor</li> <li>Como indica la documentaci\u00f3n de Docker, reiniciar\u00e1 autom\u00e1tica el contenedor si se para por alguna raz\u00f3n, no as\u00ed si lo paramos nosotros a mano.</li> <li>Exponemos los puertos del contenedor al mundo para poder acceder a ellos. En este caso el puerto 8081 del contenedor se corresponder\u00e1 con el puerto 8081 de nuestra m\u00e1quina. De esta forma accederemos a la interfaz web.</li> </ol> <p>Donde las variables que van precedidas de un s\u00edmbolo de d\u00f3lar y entre llaves (${  }) son variables de entorno, que est\u00e1n definidas en el archivo <code>.env</code></p> <p>Para utilizar el escenario en este caso es muy sencillo. Basta con seguir la pauta de siempre:</p> <p></p> <p>Tras descargar las im\u00e1genes y construir los contenedores, ya estamos en disposici\u00f3n absoluta de utilizarlos.</p> <p>Accedemos a Mongo Express :</p> <p></p> <p>Atenci\u00f3n</p> <p>Una vez m\u00e1s, yo estoy utilizando AWS. Si estamos levantando este escenario en nuestro propio equipo, habr\u00edamos de poner <code>http://localhost:8081</code>.</p> <p>Y ya podremos interactuar con el servidor MongoDB:</p> <p></p>"},{"location":"mysql/","title":"Base de datos MySQL con SQL workbench o PHPMyadmin (opcional)","text":""},{"location":"mysql/#instrucciones-para-levantar-el-escenario","title":"Instrucciones para levantar el escenario","text":"<p>Este escenario permite levantar una base de datos MySQL 8 (podr\u00eda elegirse otra versi\u00f3n sin problemas).</p> <p>De forma adicional, puede levantar un contenedor con MySQL Workbench y/u otro con PHPmyadmin para interactuar con la base de datos.</p> <p>De forma predeterminada, la parte para correr el contenedor con MySQL Workbench est\u00e1 comentada (l\u00edneas resaltadas m\u00e1s abajo) pero bastar\u00eda con descomentarlas. </p> <p>Tambi\u00e9n por defecto corre el contenedor con PHPmyadmin, si no fuera necesario podr\u00edan comentarse las l\u00edneas apropiadas (de la 33 a la 44).</p> docker-compose.yml<pre><code>services:\n# mysql-workbench:\n#   image: lscr.io/linuxserver/mysql-workbench:latest\n#   container_name: mysql-workbench\n#   environment:\n#     - PUID=1000\n#     - PGID=1000\n#     - TZ=Etc/UTC\n#   volumes:\n#     - /directorio/con/la/configuracion:/config # (1)\n#   ports:\n#     - 3000:3000 # (2)\n#     - 3001:3001 # (3)\n#   cap_add:\n#     - IPC_LOCK\n#   restart: unless-stopped\nbase-datos:\nimage: mysql:8.0\ncontainer_name: mysql\nports: # (4)\n- \"33306:3306\" environment: # (5)\nMYSQL_DATABASE: ${MYSQL_DB}\nMYSQL_USER: ${USUARIO_MYSQL}\nMYSQL_PASSWORD: ${PASSWORD_USUARIO_MYSQL}\nMYSQL_ROOT_PASSWORD: ${PASSWORD_ROOT_MYSQL}\nvolumes:\n- persistente:/var/lib/mysql # (6)\nnetworks:\n- redBBDD # (7)\nphpmyadmin:\nimage: phpmyadmin/phpmyadmin\ncontainer_name: phpmyadmin-mysql\nports:\n- 8000:80 # (8)\nenvironment: MYSQL_USER: ${USUARIO_MYSQL}\nMYSQL_PASSWORD: ${PASSWORD_USUARIO_MYSQL}\nMYSQL_ROOT_PASSWORD: ${PASSWORD_ROOT_MYSQL}\nPMA_HOST: mysql\nnetworks:\n- redBBDD\nvolumes:\npersistente:\nnetworks:\nredBBDD: </code></pre> <ol> <li>Por si queremos pasarle alguna configuraci\u00f3n a MySQL Workbench, la meter\u00edamos en un directorio que luego mapeamos al contenedor</li> <li>Accedemos a la aplicaci\u00f3n mediante HTTP: <code>http://localhost:3000</code></li> <li>Accedemos a la aplicaci\u00f3n mediante HTTPS: <code>https://localhost:3001</code></li> <li> <p>El puerto 3306 del contenedor MySQL, se corresponder\u00e1 con el puerto 33306 de nuestra m\u00e1quina.</p> <p>Estas l\u00edneas s\u00f3lo son necesarias si pretendemos acceder directamente al servidor de base de datos desde otro equipo (un phpmyadmin local, por ejemplo), en caso contrario podr\u00edamos comentarlas las dos.</p> </li> <li> <p>Estas variables de entorno vienen definidas en el fichero <code>.env</code> y se pueden cambiar a nuestro antojo</p> </li> <li>Con este volumen haremos que los datos del contenedor de la base de datos persistan en nuestro propio equipo y no se pierdan aunque el contenedor se pare o elimine</li> <li>Creamos una red compartida por los contenedores, de esta forma podr\u00e1n identificarse unos a otros \u00fanicamente por el nombre sin hacer uso de la IP</li> <li>Para acceder a PHPMyadmin desde el navegador, usaremos el puerto 8000 de nuestra m\u00e1quina: <code>http://localhost:8000</code></li> </ol> <p>As\u00ed las cosas, para levantar el escenario bastar\u00e1 con abrir el terminal, posicionarse en el directorio donde este el archivo <code>docker-compose.yml</code>y ejecutar el comando:</p> <pre><code>$ docker-compose up -d\n</code></pre> <p>Podremos acceder a cualquiera de las dos aplicaciones que hayamos levantado (SLQ Workbench/PHPMyadmin) y configurar el acceso a la base de datos con las credenciales que hayamos configurado en nuestras variables de entorno, poniendo como host destino <code>mysql</code> (el container_name del contenedor de la base de datos) y como puerto, el 33306</p> <p>Accedemos a SQL Workbench en el puerto 3000. En mi caso la URL no es <code>localhost</code>porque no he desplegado los contenedores en mi m\u00e1quina sino en AWS:</p> <p></p> <p>Si queremos acceder de forma segura, emplearemos https y el puerto 3001:</p> <p></p> <p>Nota</p> <p>Nos dar\u00e1 un aviso porque est\u00e1 utilizando certificados autofirmados. Habr\u00e1 que decirle que haga una excepci\u00f3n.</p> <p>Configuraremos el servidor de BBDD al que conectarnos:</p> <p></p> <p>En hostname bastar\u00e1 que pongamos <code>mysql</code>porque es el nombre que le hemos dado a nuestro contenedor con la base de datos. </p> <p>Como adem\u00e1s hemos configurado en el docker-compose.yml que todos los contenedores est\u00e9n en la misma red, son capaces de comunicarse simplemente por el nombre:</p> <p></p> <p>Nos pedir\u00e1 la contrase\u00f1a:</p> <p></p> <p>Y estamos dentro de nuestro servidor MySQL. Podemos ver que aparece la base de datos que le indicamos en las variables de entorno que deb\u00eda crear:</p> <p></p> <p>El mismo proceso para phpmyadmin:</p> <p></p> <p></p> <p>Si quisi\u00e9ramos conectarnos directamente a la base de datos desde un equipo remoto, debemos haber dejado la directiva ports sin comentar y acceder al puerto 33306:</p> <p></p>"},{"location":"tomcat/","title":"Servidor de aplicaciones Tomcat para la ejecuci\u00f3n de aplicaciones Java","text":""},{"location":"tomcat/#instrucciones-para-levantar-el-escenario","title":"Instrucciones para levantar el escenario","text":"<p>Este escenario es de los m\u00e1s sencillos. Hace uso de un servidor de aplicaciones Tomcat para ejecutar una aplicaci\u00f3n Java, previamente compilada y empaquetada en un .war</p> <p>Dependiendo de la versi\u00f3n de Java utilizada, se deber\u00e1 utilziar una versi\u00f3n de Tomcat u otra. En este caso utilizaremos una versi\u00f3n un poco obsoleta ya que la aplicaci\u00f3n de muestra est\u00e1 algo desfasada.</p> <p>En caso de desarrollos en Java 11 o superiores, podr\u00edamos utilizar ya a partir de la versi\u00f3n 10 de Tomcat. Algo m\u00e1s de detalle aqu\u00ed</p> <p>En cualquier caso, utilizaremos un \u00fanico contenedor. Por este motivo nos basta con un <code>Dockerfile</code>y no necesitamos utilizar <code>docker compose</code>para tener un escenario multicontenedor.</p> <p>Ser\u00eda tan simple como:</p> <pre><code>FROM tomcat:7.0 # (1)\nCOPY ./aplicacion/poc.war /usr/local/tomcat/webapps # (2)\n</code></pre> <ol> <li>Imagen con la versi\u00f3n de Tomcat indicada que se utilizar\u00e1 para crear el contenedor</li> <li>Al construir el contenedor, copia el fichero poc.war al directorio destinado a servir las aplicaciones en un servidor Tomcat</li> </ol> <p>Para construir y correr el contenedor, en el terminal y situados en el directorio del proyecto (donde est\u00e1 el Dockerfile) basta con hacer:</p> <pre><code>$ docker image build -t raul/tomcat_poc . # (1)\n$ docker container run --publish 8081:8080 raul/tomcat_poc # (2)\n</code></pre> <ol> <li>Construye la imagen del contenedor a partir del Dockerfile que se encuentra en el directorio actual (<code>.</code>) y como nombre ponle <code>raul/tomcat_poc</code></li> <li>Corre el contenedor mapeando el puerto 8080 de Tomcat en el contenedor, con el  puerto 8081 de la m\u00e1quina donde est\u00e9 corriendo el contenedors</li> </ol> <p>Una vez corriendo el contenedor, no nos queda m\u00e1s que acceder al servidor (localhost si es nuestra m\u00e1quina, IP o nombre de dominio si es una remota):</p> <p></p> <p>Accedemos al puerto 8081 y al directorio <code>poc</code>que es como hemos llamado al .war de nuestra aplicaci\u00f3n.</p> <p>Y corroboramos que todo funciona correctamente:</p> <p></p> <p></p>"},{"location":"xampp-laravel/","title":"Entorno XAMPP con Laravel","text":""},{"location":"xampp-laravel/#instrucciones-para-levantar-el-escenario","title":"Instrucciones para levantar el escenario","text":"<p>Este proyecto utiliza PHP 8.</p> <p>Para ilustrar este despliegue se utiliza una aplicaci\u00f3n de muestra, obtenida de aqu\u00ed: https://github.com/JeffreyWay/Laravel-From-Scratch-Blog-Project</p> <p>Podr\u00eda desplegarse la aplicaci\u00f3n cuando se hiciese el <code>docker-compose up -d</code> pero lo he dejado como est\u00e1 para que pueda ser gen\u00e9rico y pueda desplegarse otra aplicaci\u00f3n si se prefiere.</p> <p>Una vez los contenedores est\u00e1n corriendo habr\u00eda que ir al contenedor del servidor web:</p> <pre><code>$ docker exec -it apache-laravel\n</code></pre> <p>Instalar dependencias:</p> <pre><code>$ composer install\n</code></pre> <p>Tras ello se debe crear la BBDD que est\u00e1 indicada en el archivo <code>.env</code> del proyecto de Laravel, en mi caso miBBDD. Esto se podria hacer desde el phpmyadmin que ya estar\u00eda corriendo en http://localhost:8001 o bien mediante instrucciones por terminal desde el mismo contenedor del servidor web en el que estamos.</p> <p>Tras ello:</p> <pre><code>$ php artisan migrate --seed\n</code></pre> <p>Y por \u00faltimo:</p> <pre><code>$ php artisan key:generate\n</code></pre> <p>Ya s\u00f3lo quedar\u00eda darle los permisos adecuados a la carpeta del servidor web para que podamos acceder:</p> <pre><code>$ chown -R www-data:wwww-data /var/www/html\n</code></pre> <p>Y podremos acceder al blog (o aplicaci\u00f3n desplegada) en http://localhost:8000</p>"}]}